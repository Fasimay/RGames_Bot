package com.RGames.RGames;

import com.RGames.RGames.DataBase.DataBaseService;
import com.RGames.RGames.DataBase.Entity.Traits;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.StringSelectInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.interactions.components.selections.SelectOption;
import net.dv8tion.jda.api.interactions.components.selections.StringSelectMenu;
import net.dv8tion.jda.api.interactions.components.text.TextInput;
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle;
import net.dv8tion.jda.api.interactions.modals.Modal;
import org.jetbrains.annotations.NotNull;
import org.springframework.stereotype.Component;

import java.util.*;

@Component
public class RerollCommandListener extends ListenerAdapter {

    private final DataBaseService dbService;
    private final Map<String, Long> messageOwners = new HashMap<>();
    final Map<Long, Map<String, Long>> userChoice = new HashMap<>();
    private final Map<Long, Integer> rollCount = new HashMap<>();
    private final Map<Long, Map<String, Integer>> rollHistory = new HashMap<>();

    public RerollCommandListener(DataBaseService dbService) {
        this.dbService = dbService;
    }

    public void registerMessageOwner(String messageId, long userId) {
        messageOwners.put(messageId, userId);
    }

    @Override
    public void onSlashCommandInteraction(@NotNull SlashCommandInteractionEvent event) {
        System.out.println("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + event.getName()); // –ü—Ä–æ–≤–µ—Ä–∫–∞

        if (!event.getName().equals("reroll")) return;


         EmbedBuilder embed = new EmbedBuilder()
                .setTitle("–í—ã–±–æ—Ä –∏–≥—Ä—ã \uD83C\uDFAE")
                .setDescription("–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:")
                .setColor(0x00ff00);

            event.replyEmbeds(embed.build())
                    .setActionRow(
                        Button.primary("reroll_AA", "Anime Adventures"),
                        Button.success("reroll_AV", "Anime Vanguards"),
                        Button.danger("reroll_ALS", "Anime Last Stand")
                    ).queue(response -> {
                        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫.
                        event.getHook().retrieveOriginal().queue(message -> {
                            messageOwners.put(message.getId(), event.getUser().getIdLong());
                        });
            });
    }

    public void onButtonInteraction(@NotNull ButtonInteractionEvent event) {
        String buttonId = event.getComponentId().trim();
        System.out.println("Button pressed: " + buttonId);

        String messageId = event.getMessageId();
        Long userId = event.getUser().getIdLong();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        if (!messageOwners.containsKey(messageId)) {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –≤—ã—Ö–æ–¥–∏–º
            return;
        }

        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        long ownerId = messageOwners.get(messageId);
        if (event.getUser().getIdLong() != ownerId) {
            event.reply("–ò–¥–∏ –≤ –ø–∏–∑–¥—É –Ω–µ —Ç–≤–æ—ë").setEphemeral(true).queue();
            return;
        }

        if ("reset_rolls".equals(buttonId)) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä—ã –∏ —Å—á–µ—Ç—á–∏–∫ —Ä–æ–ª–ª–æ–≤
            userChoice.remove(userId);
            rollCount.remove(userId);
            rollHistory.remove(userId);

            EmbedBuilder embed = new EmbedBuilder()
                    .setTitle("–í—ã–±–æ—Ä –∏–≥—Ä—ã üéÆ")
                    .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:")
                    .setColor(0x00ff00);

            event.editMessageEmbeds(embed.build())
                    .setActionRow(
                            Button.primary("reroll_AA", "Anime Adventures"),
                            Button.success("reroll_AV", "Anime Vanguards"),
                            Button.danger("reroll_ALS", "Anime Last Stand")
                    )
                    .queue();

            System.out.println("Rolls reset for user: " + userId);
            return;
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
        if (!userChoice.containsKey(userId)) {
            Long gameId = null;
            switch (buttonId) {
                case "reroll_AV":
                    gameId = 1L;
                    break;
                case "reroll_AA":
                    gameId = 2L;
                    break;
                case "reroll_ALS":
                    gameId = 3L;
                    break;
                default:
                    System.out.println("Unknown gameId button: '" + buttonId + "'");
                    // –í–º–µ—Å—Ç–æ reply ‚Äî –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–æ –æ—à–∏–±–∫–∏:
                    event.deferEdit().queue();
                    return;
            }
            userChoice.put(userId, gameId);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–æ–ª–ª–∞
            sendRollOptions(event);
            return;
        } else {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–∞ —Ä–æ–ª–ª–∞
            System.out.println("Received roll button: '" + buttonId + "' (length: " + buttonId.length() + ")");
            Long rollTypeId = null;
            if ("reroll_one_roll".equals(buttonId)) {
                rollTypeId = 1L;
            } else if ("reroll_n_roll".equals(buttonId)) {
                rollTypeId = 2L;
            } else if ("reroll_to_passive".equals(buttonId)) {
                rollTypeId = 3L;
        }
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–∞ —Ä–æ–ª–ª–∞
        System.out.println("Received roll button: '" + buttonId + "' (length: " + buttonId.length() + ")");

        Long rollTypeId = switch (buttonId) {
            case "one_roll" -> 1L;
            case "n_roll" -> 2L;
            case "reroll_until_passive" -> 3L;
            default -> null;
        };

        if (rollTypeId == null) {
            System.out.println("Unknown rollTypeId button: '" + buttonId + "'");
            event.deferEdit().queue();
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
        Long gameId = userChoice.get(userId).get(messageId);
        if (gameId == null) {
            event.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–≥—Ä—É!").setEphemeral(true).queue();
            return;
        }

        // –ë–µ—Ä–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∏–≤–æ–∫ –∏–∑ –ë–î
        List<Traits> traits = dbService.getTraitsByGameId(gameId);
        if (traits.isEmpty()) {
            event.reply("–ü–∞—Å—Å–∏–≤–æ–∫ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –Ω–µ—Ç—É!").setEphemeral(true).queue();
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ 1 —Ä–æ–ª–ª–∞
        if (rollTypeId == 1L) {
            rollCount.put(userId, rollCount.getOrDefault(userId, 0) + 1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            int count = rollCount.get(userId);
            Traits rolledPassive = PassiveRoller.rollOnePassive(traits);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–∞–¥–µ–Ω–∏–π
            rollHistory.putIfAbsent(userId, new HashMap<>());
            Map<String, Integer> userHistory = rollHistory.get(userId);
            userHistory.put(rolledPassive.getTraitName(), userHistory.getOrDefault(rolledPassive.getTraitName(), 0) + 1);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–π –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            StringBuilder historyText = new StringBuilder("\n\n**üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–∞–¥–µ–Ω–∏–π:**\n");
            for (Map.Entry<String, Integer> entry : userHistory.entrySet()) {
                historyText.append(String.format("%s (%d —Ä–∞–∑)\n", entry.getKey(), entry.getValue()));
            }

            if (rolledPassive != null) {
                String traitInfo = "**–ù–∞–∑–≤–∞–Ω–∏–µ**: " + rolledPassive.getTraitName() + "\n" +
                        "**–†–µ–¥–∫–æ—Å—Ç—å**: " + rolledPassive.getTraitRarity() + "\n" +
                        "**–®–∞–Ω—Å**: " + String.format("%.2f%%", rolledPassive.getTraitChance()) + "\n\n" +
                        "**–û–ø–∏—Å–∞–Ω–∏–µ**: " + rolledPassive.getTraitDescription() + "\n\n" +
                        "**–†–æ–ª–ª–æ–≤ —Å–¥–µ–ª–∞–Ω–æ**: " + count + historyText.toString();

                // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ hook
                if (event.isAcknowledged()) {
                    event.getHook().editOriginalEmbeds(new EmbedBuilder()
                                    .setTitle("–í–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Å—Å–∏–≤–∫–∞! üéâ")
                                    .setDescription(traitInfo)
                                    .setColor(0x00ff00)
                                    .build())
                            .setActionRow(
                                    Button.primary("one_roll", "–û–¥–∏–Ω —Ä–æ–ª–ª"),
                                    Button.success("n_roll", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–ª–æ–≤"),
                                    Button.danger("reroll_until_passive", "–î–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Å—Å–∏–≤–∫–∏"),
                                    Button.secondary("reset_rolls", "üîÑ Reset")
                            ).queue();
                } else {
                    event.editMessageEmbeds(new EmbedBuilder()
                                    .setTitle("–í–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Å—Å–∏–≤–∫–∞! üéâ")
                                    .setDescription(traitInfo)
                                    .setColor(0x00ff00)
                                    .build())
                            .setActionRow(
                                    Button.primary("one_roll", "–û–¥–∏–Ω —Ä–æ–ª–ª"),
                                    Button.success("n_roll", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–ª–æ–≤"),
                                    Button.danger("reroll_until_passive", "–î–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Å—Å–∏–≤–∫–∏"),
                                    Button.secondary("reset_rolls", "üîÑ Reset")
                            ).queue();
                }
            } else {
                System.out.println("Unknown roll type button: '" + buttonId + "'");
                // –í–º–µ—Å—Ç–æ reply ‚Äî –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–æ –æ—à–∏–±–∫–∏:
                event.deferEdit().queue();
                return;
            }
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
            Long gameId = userChoice.get(userId);
            if (gameId == null) {
                event.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–≥—Ä—É!").setEphemeral(true).queue();
                return;
            }
            // –ë–µ—Ä–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∏–≤–æ–∫ –∏–∑ –ë–î
            List<Traits> traits = dbService.getTraitsByGameId(gameId);
            if (traits.isEmpty()) {
                event.reply("–ü–∞—Å—Å–∏–≤–æ–∫ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –Ω–µ—Ç—É!").setEphemeral(true).queue();
                return;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ 1 —Ä–æ–ª–ª–∞    
            }
            if (rollTypeId == 1L) {
                rollCount.put(userId, rollCount.getOrDefault(userId, 0) + 1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                int count = rollCount.get(userId);
                Traits rolledPassive = PassiveRoller.rollOnePassive(traits);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–∞–¥–µ–Ω–∏–π
                rollHistory.putIfAbsent(userId, new HashMap<>());
                Map<String, Integer> userHistory = rollHistory.get(userId);
                userHistory.put(rolledPassive.getTraitName(), userHistory.getOrDefault(rolledPassive.getTraitName(), 0) + 1);

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–π –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                StringBuilder historyText = new StringBuilder("\n\n**üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–∞–¥–µ–Ω–∏–π:**\n");
                for (Map.Entry<String, Integer> entry : userHistory.entrySet()) {
                    historyText.append(String.format("%s (%d —Ä–∞–∑)\n", entry.getKey(), entry.getValue()));
                }

                if (rolledPassive != null) {
                    String traitInfo = "**–ù–∞–∑–≤–∞–Ω–∏–µ**: " + rolledPassive.getTraitName() + "\n" +
                            "**–†–µ–¥–∫–æ—Å—Ç—å**: " + rolledPassive.getTraitRarity() + "\n" +
                            "**–®–∞–Ω—Å**: " + String.format("%.2f%%", rolledPassive.getTraitChance()) + "\n\n" +
                            "**–û–ø–∏—Å–∞–Ω–∏–µ**: " + rolledPassive.getTraitDescription() + "\n\n" +
                            "**–†–æ–ª–ª–æ–≤ —Å–¥–µ–ª–∞–Ω–æ**: " + count + historyText.toString();

                    // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ hook
                    if (event.isAcknowledged()) {
                        event.getHook().editOriginalEmbeds(new EmbedBuilder()
                                        .setTitle("–í–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Å—Å–∏–≤–∫–∞! üéâ")
                                        .setDescription(traitInfo)
                                        .setColor(0x00ff00)
                                        .build())
                                .setActionRow(
                                        Button.primary("reroll_one_roll", "–û–¥–∏–Ω —Ä–æ–ª–ª"),
                                        Button.success("reroll_n_roll", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–ª–æ–≤"),
                                        Button.danger("reroll_to_passive", "–î–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Å—Å–∏–≤–∫–∏"),
                                        Button.secondary("reset_rolls", "üîÑ Reset")
                                ).queue();
                    } else {
                        event.editMessageEmbeds(new EmbedBuilder()
                                        .setTitle("–í–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Å—Å–∏–≤–∫–∞! üéâ")
                                        .setDescription(traitInfo)
                                        .setColor(0x00ff00)
                                        .build())
                                .setActionRow(
                                        Button.primary("reroll_one_roll", "–û–¥–∏–Ω —Ä–æ–ª–ª"),
                                        Button.success("reroll_n_roll", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–ª–æ–≤"),
                                        Button.danger("reroll_to_passive", "–î–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Å—Å–∏–≤–∫–∏"),
                                        Button.secondary("reset_rolls", "üîÑ Reset")
                                ).queue();
                    }
                } else {
                    event.reply("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±–∏—Ç—å –ø–∞—Å—Å–∏–≤–∫—É.").setEphemeral(true).queue();
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ n –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–ª–æ–≤
            if (rollTypeId == 2L) {
                TextInput rollCountInput = TextInput.create("roll_count", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–ª–æ–≤", TextInputStyle.SHORT)
                        .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)")
                        .setRequired(true)
                        .setMinLength(1)
                        .setMaxLength(1000) // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 99 —Ä–æ–ª–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º
                        .build();

                Modal modal = Modal.create("roll_count_modal", "–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–ª–ª–æ–≤")
                        .addActionRow(rollCountInput)
                        .build();

                event.replyModal(modal).queue();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–ª–æ–≤ –¥–æ –ø–∞—Å—Å–∏–≤–∫–∏
            if (rollTypeId == 3L) {
                EmbedBuilder embed = new EmbedBuilder()
                        .setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Å—Å–∏–≤–∫—É üéØ")
                        .setDescription("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø–∞—Å—Å–∏–≤–∫–æ–π, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.")
                        .setColor(0x00ff00);

                List<SelectOption> options = new ArrayList<>();
                for (Traits trait : traits) {
                    options.add(SelectOption.of(trait.getTraitName(), "roll_target_" + trait.getTraitName()));
                }

                StringSelectMenu menu = StringSelectMenu.create("passive_select_menu")
                        .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Å—Å–∏–≤–∫—É")
                        .addOptions(options)
                        .build();

                event.editMessageEmbeds(embed.build()).setActionRow(menu).queue();
            }
        }
    }

    @Override
    public void onModalInteraction(@NotNull ModalInteractionEvent event) {
        System.out.println("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞. –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è: " + event.getValues());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "roll_count"
        if (event.getValue("roll_count") == null) {
            System.out.println("–ó–Ω–∞—á–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º 'roll_count' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            event.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.").setEphemeral(true).queue();
            return;
        }

        String rollCountStr = event.getValue("roll_count").getAsString();
        System.out.println("–ü–æ–ª—É—á–µ–Ω–æ —á–∏—Å–ª–æ: " + rollCountStr);

        long userId = event.getUser().getIdLong();

        try {
            int rollCount = Integer.parseInt(rollCountStr);
            if (rollCount <= 0 || rollCount > 10000) {
                event.reply("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 –µ–±–ª–∞–Ω!").setEphemeral(true).queue();
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Long gameId = userChoice.get(userId);
            if (gameId == null) {
                event.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É!").setEphemeral(true).queue();
                return;
            }

            try {
                // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Å—Å–∏–≤–∫–∏ –∏–∑ –∏–≥—Ä—ã
                List<Traits> traits = dbService.getTraitsByGameId(gameId);
                System.out.println("–ü–æ–ª—É—á–µ–Ω–æ –ø–∞—Å—Å–∏–≤–æ–∫: " + traits.size());
                if (traits.isEmpty()) {
                    event.reply("–ü–∞—Å—Å–∏–≤–æ–∫ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –Ω–µ—Ç!").setEphemeral(true).queue();
                    return;
                }

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Å—Å–∏–≤–æ–∫ –≤ –º–µ—Ç–æ–¥ –ø–æ–¥—Å—á–µ—Ç–∞
                List<Traits> rolledPassives = PassiveRoller.rollNPassives(traits, rollCount);

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Å—Å–∏–≤–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                Map<String, Integer> countMap = new HashMap<>();
                Map<String, Traits> traitDetails = new HashMap<>();

                for (Traits trait : rolledPassives) {
                    String name = trait.getTraitName();
                    countMap.put(name, countMap.getOrDefault(name, 0) + 1);
                    traitDetails.putIfAbsent(name, trait);
                }

                List<Map.Entry<String, Integer>> sortedPassives = new ArrayList<>(countMap.entrySet());
                sortedPassives.sort(Comparator.comparing(entry -> traitDetails.get(entry.getKey()).getTraitChance()));

                EmbedBuilder embed = new EmbedBuilder();
                embed.setTitle("–í–∞–º –≤—ã–ø–∞–ª–∏ —Ç–∞–∫–∏–µ –ø–∞—Å—Å–∏–≤–∫–∏! üéâ").setColor(0x00ff00);

                for (Map.Entry<String, Integer> entry : sortedPassives) {
                    Traits trait = traitDetails.get(entry.getKey());
                    int count = entry.getValue();

                    embed.addField(trait.getTraitName() + " (" + count + ")\u200B",
                            "**–†–µ–¥–∫–æ—Å—Ç—å:** " + trait.getTraitRarity() + "\n" +
                            "**–®–∞–Ω—Å:** " + String.format("%.2f%%", trait.getTraitChance()), false);

                }

                event.editMessageEmbeds(embed.build()).queue();
            } catch (Exception e) {
                e.printStackTrace();
                event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!").setEphemeral(true).queue();
            }
        } catch (NumberFormatException e) {
            event.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!").setEphemeral(true).queue();
        }
    }

    @Override
    public void onStringSelectInteraction(@NotNull StringSelectInteractionEvent event) {
        if (event.getComponentId().equals("passive_select_menu")) {
            String targetPassiveName = event.getSelectedOptions().get(0).getValue().replace("roll_target_", "");
            System.out.println("–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞—Å—Å–∏–≤–∫–∞: " + targetPassiveName);
            Long userId = event.getUser().getIdLong();
            Long gameId = userChoice.get(userId);

            if (gameId == null) {
                event.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–≥—Ä—É –µ–±–ª–æ!").setEphemeral(true).queue();
                return;
            }

            List<Traits> traits = dbService.getTraitsByGameId(gameId);

            Traits targetTrait = traits.stream()
                    .filter(trait -> trait.getTraitName().equals(targetPassiveName))
                    .findFirst()
                    .orElse(null);

            if (targetTrait == null) {
                event.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Å—Å–∏–≤–∫—É –µ–∂ –µ–±–ª–∞–Ω!").setEphemeral(true).queue();
                return;
            }

            int rolls = PassiveRoller.rollUntilPassive(traits, targetPassiveName);

            String traitInfo = "**–ù–∞–∑–≤–∞–Ω–∏–µ**: " + targetTrait.getTraitName() + "\n" +
                    "**–†–µ–¥–∫–æ—Å—Ç—å**: " + targetTrait.getTraitRarity() + "\n" +
                    "**–®–∞–Ω—Å**: " + String.format("%.2f%%", targetTrait.getTraitChance()) + "\n\n" +
                    "**–û–ø–∏—Å–∞–Ω–∏–µ**: " + targetTrait.getTraitDescription();

            EmbedBuilder embed = new EmbedBuilder()
                    .setTitle("–í—ã –≤—ã–±–∏–ª–∏ **" + targetPassiveName + "** –∑–∞ **" + rolls + "** —Ä–æ–ª–ª–æ–≤! üéâ")
                    .setDescription(traitInfo)
                    .setColor(0x00ff00);

            event.editMessageEmbeds(embed.build())
                    .setActionRow(
                            Button.primary("one_roll", "–û–¥–∏–Ω —Ä–æ–ª–ª"),
                            Button.success("n_roll", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–ª–æ–≤"),
                            Button.danger("reroll_until_passive", "–î–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Å—Å–∏–≤–∫–∏"),
                            Button.secondary("reset_rolls", "üîÑ Reset")
                    ).queue();
        }
    }

    private void sendRollOptions(ButtonInteractionEvent event) {
        EmbedBuilder embed = new EmbedBuilder()
                .setTitle("–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–æ–ª–ª–∞")
                .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–ª–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:")
                .setColor(0x00ff00);
        if (event.isAcknowledged()) {
            event.getHook().editOriginalEmbeds(embed.build())
                    .setActionRow(
                            Button.primary("one_roll", "–û–¥–∏–Ω —Ä–æ–ª–ª"),
                            Button.success("n_roll", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–ª–æ–≤"),
                            Button.danger("reroll_until_passive", "–î–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Å—Å–∏–≤–∫–∏"),
                            Button.secondary("reset_rolls", "üîÑ Reset")
                    ).queue(
                            success -> System.out.println("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ hook!"),
                            failure -> System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ hook: " + failure.getMessage())
                    );
        } else {
            event.editMessageEmbeds(embed.build())
                    .setActionRow(
                            Button.primary("one_roll", "–û–¥–∏–Ω —Ä–æ–ª–ª"),
                            Button.success("n_roll", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–ª–æ–≤"),
                            Button.danger("reroll_until_passive", "–î–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Å—Å–∏–≤–∫–∏"),
                            Button.secondary("reset_rolls", "üîÑ Reset")
                    ).queue(
                            success -> System.out.println("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"),
                            failure -> System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: " + failure.getMessage())
                    );
        }
    }
}